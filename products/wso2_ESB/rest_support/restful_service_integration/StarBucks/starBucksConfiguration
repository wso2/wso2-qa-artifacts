<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://ws.apache.org/ns/synapse">
   <registry provider="org.wso2.carbon.mediation.registry.WSO2Registry">
      <parameter name="cachableDuration">15000</parameter>
   </registry>
   <localEntry key="OrderHtmlGenerator">
      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                      xmlns:m1="http://ws.starbucks.com/xsd"
                      xmlns:fn="http://www.w3.org/2005/02/xpath-functions"
                      xmlns:m0="http://ws.starbucks.com"
                      version="2.0"
                      exclude-result-prefixes="fn m0 m1">
         <xsl:output method="xml" omit-xml-declaration="yes" indent="yes"/>
         <xsl:param name="SystemDate"/>
         <xsl:param name="SystemURL"/>
         <xsl:template match="m0:getPendingOrdersResponse">
            <html xmlns="">
               <head>
                  <title>Drinks to make</title>
               </head>
               <body>
                  <h1>Pending Orders</h1>
                  <table border="1">
                     <tr>
                        <td>ID</td>
                        <td>urn:starbucks:barista:coffees-to-make</td>
                     </tr>
                     <tr>
                        <td>Author</td>
                        <td>Barista System</td>
                     </tr>
                     <tr>
                        <td>Updated</td>
                        <td>
                           <xsl:value-of select="$SystemDate"/>
                        </td>
                     </tr>
                  </table>
                  <p/>
                  <table border="1">
                     <tr>
                        <th>Order ID</th>
                        <th>Drink Name</th>
                        <th>Additions</th>
                        <th>Cost</th>
                        <th>URL</th>
                     </tr>
                     <xsl:apply-templates select="m0:return"/>
                  </table>
               </body>
            </html>
         </xsl:template>
         <xsl:template match="m0:return">
            <tr xmlns="">
               <td>
                  <xsl:value-of select="m1:orderId"/>
               </td>
               <td>
                  <xsl:value-of select="m1:drinkName"/>
               </td>
               <td>
                  <xsl:value-of select="m1:additions"/>
               </td>
               <td>
                  <xsl:value-of select="m1:cost"/>
               </td>
               <td>
                  <a>
                     <xsl:attribute name="href">
                        <xsl:value-of select="concat($SystemURL, 'order/', m1:orderId)"/>
                     </xsl:attribute>
                     <xsl:value-of select="m1:orderId"/>
                  </a>
               </td>
            </tr>
         </xsl:template>
      </xsl:stylesheet>
   </localEntry>
   <localEntry key="RemoveNS">
      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
         <xsl:output method="xml" indent="no"/>
         <xsl:template match="/|comment()|processing-instruction()">
            <xsl:copy>
               <xsl:apply-templates/>
            </xsl:copy>
         </xsl:template>
         <xsl:template match="*">
            <xsl:element name="{local-name()}">
               <xsl:apply-templates select="@*|node()"/>
            </xsl:element>
         </xsl:template>
         <xsl:template match="@*">
            <xsl:attribute name="{local-name()}">
               <xsl:value-of select="."/>
            </xsl:attribute>
         </xsl:template>
      </xsl:stylesheet>
   </localEntry>
   <localEntry key="OrderFeedGenerator">
      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                      xmlns:m1="http://ws.starbucks.com/xsd"
                      xmlns:fn="http://www.w3.org/2005/02/xpath-functions"
                      xmlns:m0="http://ws.starbucks.com"
                      version="2.0"
                      exclude-result-prefixes="fn m0 m1">
         <xsl:output method="xml" omit-xml-declaration="yes" indent="yes"/>
         <xsl:param name="SystemDate"/>
         <xsl:param name="SystemURL"/>
         <xsl:template match="m0:getPendingOrdersResponse">
            <feed xmlns="http://www.w3.org/2005/Atom">
               <title>Drinks to make</title>
               <link rel="self">
                  <xsl:attribute name="href">
                     <xsl:value-of select="concat($SystemURL, 'orders')"/>
                  </xsl:attribute>
               </link>
               <updated>
                  <xsl:value-of select="$SystemDate"/>
               </updated>
               <author>
                  <name>Barista System</name>
               </author>
               <id>urn:starbucks:barista:coffees-to-make</id>
               <xsl:apply-templates select="m0:return"/>
            </feed>
         </xsl:template>
         <xsl:template match="m0:return">
            <entry xmlns="http://www.w3.org/2005/Atom">
               <id>
                  <xsl:value-of select="concat($SystemURL, 'order/', m1:orderId)"/>
               </id>
               <title>
                  <xsl:value-of select="concat('Order ID - ', m1:orderId)"/>
               </title>
               <updated>
                  <xsl:value-of select="m1:timestamp"/>
               </updated>
               <link rel="alternate" type="application/xml">
                  <xsl:attribute name="href">
                     <xsl:value-of select="concat($SystemURL, 'order/', m1:orderId)"/>
                  </xsl:attribute>
               </link>
               <content type="application/xml">
                  <order xmlns="http://starbucks.example.org">
                     <drink>
                        <xsl:value-of select="m1:drinkName"/>
                     </drink>
                     <additions>
                        <xsl:value-of select="m1:additions"/>
                     </additions>
                     <cost>
                        <xsl:value-of select="m1:cost"/>
                     </cost>
                  </order>
                  <link rel="edit" type="application/atom+xml">
                     <xsl:attribute name="href">
                        <xsl:value-of select="concat($SystemURL, 'barista/order/', m1:orderId)"/>
                     </xsl:attribute>
                  </link>
               </content>
            </entry>
         </xsl:template>
      </xsl:stylesheet>
   </localEntry>
   <endpoint name="DataServiceEndpoint">
      <address uri="http://localhost:9766/services/StarbucksOutletService"
               format="soap11"/>
   </endpoint>
   <sequence name="StarbucksMissingOrder">
      <property name="HTTP_SC" value="404" scope="axis2"/>
      <payloadFactory media-type="xml">
         <format>
            <message xmlns="http://starbucks.example.org">
               <text>No order exists by the specified ID</text>
            </message>
         </format>
         <args/>
      </payloadFactory>
   </sequence>
   <sequence name="StarbucksAtomFeed">
      <xslt key="OrderFeedGenerator">
         <property name="SystemDate"
                   expression="get-property(&#34;SYSTEM_DATE&#34;, &#34;yyyy-MM-dd'T'hh:mm:ss'Z'&#34;)"/>
         <property name="SystemURL" expression="$ctx:STARBUCKS_SYSTEM_URL"/>
      </xslt>
      <property name="ContentType" value="application/atom+xml" scope="axis2"/>
   </sequence>
   <sequence name="StarbucksOrderInfo">
      <property xmlns:m1="http://ws.starbucks.com/xsd"
                name="Location"
                expression="concat($ctx:STARBUCKS_HOST_NAME, 'order/', //m1:orderId)"
                scope="transport"/>
      <payloadFactory media-type="xml">
         <format>
            <order xmlns="http://starbucks.example.org">
               <drink>$1</drink>
               <cost>$2</cost>
               <additions>$3</additions>
               <next xmlns="http://example.org/state-machine"
                     rel="$4"
                     uri="$5"
                     type="application/xml"/>
            </order>
         </format>
         <args>
            <arg xmlns:m1="http://ws.starbucks.com/xsd"
                 evaluator="xml"
                 expression="//m1:drinkName/text()"/>
            <arg xmlns:m1="http://ws.starbucks.com/xsd"
                 evaluator="xml"
                 expression="//m1:cost/text()"/>
            <arg xmlns:m1="http://ws.starbucks.com/xsd"
                 evaluator="xml"
                 expression="//m1:additions/text()"/>
            <arg xmlns:m1="http://ws.starbucks.com/xsd"
                 evaluator="xml"
                 expression="concat($ctx:STARBUCKS_HOST_NAME, 'payment')"/>
            <arg xmlns:m1="http://ws.starbucks.com/xsd"
                 evaluator="xml"
                 expression="concat($ctx:STARBUCKS_HOST_NAME, 'payment/order/', $ctx:uri.var.orderId)"/>
         </args>
      </payloadFactory>
   </sequence>
   <sequence name="StarbucksFault">
      <property name="HTTP_SC" value="500" scope="axis2"/>
      <payloadFactory media-type="xml">
         <format>
            <sb:serverError xmlns:sb="http://starbucks.example.org">
               <sb:errorCode>$1</sb:errorCode>
               <sb:errorMessage>$2</sb:errorMessage>
               <sb:errorDetail>$3</sb:errorDetail>
            </sb:serverError>
         </format>
         <args>
            <arg evaluator="xml" expression="get-property('ERROR_CODE')"/>
            <arg evaluator="xml" expression="get-property('ERROR_MESSAGE')"/>
            <arg evaluator="xml" expression="get-property('ERROR_DETAIL')"/>
         </args>
      </payloadFactory>
      <property name="RESPONSE" value="true"/>
      <header name="To" action="remove"/>
      <send/>
   </sequence>
   <sequence name="fault">
      <log level="full">
         <property name="MESSAGE" value="Executing default 'fault' sequence"/>
         <property name="ERROR_CODE" expression="get-property('ERROR_CODE')"/>
         <property name="ERROR_MESSAGE" expression="get-property('ERROR_MESSAGE')"/>
      </log>
      <drop/>
   </sequence>
   <sequence name="StarbucksPaymentInfo">
      <payloadFactory media-type="xml">
         <format>
            <payment xmlns="http://starbucks.example.org/">
               <cardNo>$1</cardNo>
               <expires>$2</expires>
               <name>$3</name>
               <amount>$4</amount>
            </payment>
         </format>
         <args>
            <arg xmlns:m1="http://ws.starbucks.com/xsd"
                 evaluator="xml"
                 expression="//m1:cardNumber"/>
            <arg xmlns:m1="http://ws.starbucks.com/xsd"
                 evaluator="xml"
                 expression="//m1:expiryDate"/>
            <arg xmlns:m1="http://ws.starbucks.com/xsd"
                 evaluator="xml"
                 expression="//m1:name"/>
            <arg xmlns:m1="http://ws.starbucks.com/xsd"
                 evaluator="xml"
                 expression="//m1:amount"/>
         </args>
      </payloadFactory>
   </sequence>
   <sequence name="main">
      <property name="HTTP_SC" value="403" scope="axis2"/>
      <payloadFactory media-type="xml">
         <format>
            <error>Invalid request</error>
         </format>
         <args/>
      </payloadFactory>
      <property name="RESPONSE" value="true"/>
      <header name="To" action="remove"/>
      <property name="NO_ENTITY_BODY" scope="axis2" action="remove"/>
      <send/>
   </sequence>
   <api name="StarbucksOrderListAPI" context="/orders">
      <resource methods="GET" faultSequence="StarbucksFault">
         <inSequence>
            <property name="HTTP_METHOD" value="POST" scope="axis2"/>
            <property xmlns:sb="http://starbucks.example.org"
                      xmlns:m0="http://ws.starbucks.com"
                      name="STARBUCKS_SYSTEM_URL"
                      expression="$axis2:SERVICE_PREFIX"/>
            <property xmlns:sb="http://starbucks.example.org"
                      xmlns:m0="http://ws.starbucks.com"
                      name="STARBUCKS_ACCEPT"
                      expression="$trp:Accept"/>
            <payloadFactory media-type="xml">
               <format>
                  <m0:getPendingOrders xmlns:m0="http://ws.starbucks.com"/>
               </format>
               <args/>
            </payloadFactory>
            <property name="SOAPAction" value="urn:getPendingOrders" scope="transport"/>
            <send>
               <endpoint key="DataServiceEndpoint"/>
            </send>
         </inSequence>
         <outSequence>
            <switch xmlns:sb="http://starbucks.example.org"
                    xmlns:m0="http://ws.starbucks.com"
                    source="$ctx:STARBUCKS_ACCEPT">
               <case regex=".*atom.*">
                  <sequence key="StarbucksAtomFeed"/>
               </case>
               <case regex=".*text/html.*">
                  <xslt key="OrderHtmlGenerator">
                     <property name="SystemDate"
                               expression="get-property(&#34;SYSTEM_DATE&#34;, &#34;yyyy-MM-dd'T'hh:mm:ss'Z'&#34;)"/>
                     <property name="SystemURL" expression="$ctx:STARBUCKS_SYSTEM_URL"/>
                  </xslt>
                  <property name="ContentType" value="text/html" scope="axis2"/>
               </case>
               <case regex=".*json.*">
                  <xslt key="RemoveNS"/>
                  <property name="messageType" value="application/json" scope="axis2"/>
               </case>
               <case regex=".*application/xml.*">
                  <property name="messageType" value="application/xml" scope="axis2"/>
               </case>
               <default>
                  <sequence key="StarbucksAtomFeed"/>
               </default>
            </switch>
            <send/>
         </outSequence>
      </resource>
   </api>
   <api name="StarbucksPaymentAPI" context="/payment">
      <resource methods="PUT GET"
                uri-template="/order/{orderId}"
                faultSequence="StarbucksFault">
         <inSequence>
            <property xmlns:m1="http://ws.starbucks.com/xsd"
                      xmlns:sb="http://starbucks.example.org"
                      xmlns:m0="http://ws.starbucks.com"
                      name="STARBUCKS_HOST_NAME"
                      expression="$axis2:SERVICE_PREFIX"/>
            <filter xmlns:m1="http://ws.starbucks.com/xsd"
                    xmlns:sb="http://starbucks.example.org"
                    xmlns:m0="http://ws.starbucks.com"
                    source="$ctx:REST_METHOD"
                    regex="PUT">
               <then>
                  <payloadFactory media-type="xml">
                     <format>
                        <m0:doPayment>
                           <m0:orderId>$1</m0:orderId>
                           <m0:name>$2</m0:name>
                           <m0:cardNumber>$3</m0:cardNumber>
                           <m0:expiryDate>$4</m0:expiryDate>
                           <m0:amount>$5</m0:amount>
                        </m0:doPayment>
                     </format>
                     <args>
                        <arg evaluator="xml" expression="$ctx:uri.var.orderId"/>
                        <arg evaluator="xml" expression="//sb:name"/>
                        <arg evaluator="xml" expression="//sb:cardNo"/>
                        <arg evaluator="xml" expression="//sb:expires"/>
                        <arg evaluator="xml" expression="//sb:amount"/>
                     </args>
                  </payloadFactory>
               </then>
               <else>
                  <payloadFactory media-type="xml">
                     <format>
                        <m0:getPayment>
                           <m0:orderId>$1</m0:orderId>
                        </m0:getPayment>
                     </format>
                     <args>
                        <arg evaluator="xml" expression="$ctx:uri.var.orderId"/>
                     </args>
                  </payloadFactory>
               </else>
            </filter>
            <property name="HTTP_METHOD" value="POST" scope="axis2"/>
            <property name="SOAPAction" value="urn:doPaymentResponse" scope="transport"/>
            <send>
               <endpoint key="DataServiceEndpoint"/>
            </send>
         </inSequence>
         <outSequence>
            <filter xmlns:m1="http://ws.starbucks.com/xsd"
                    xmlns:sb="http://starbucks.example.org"
                    xmlns:m0="http://ws.starbucks.com"
                    source="$ctx:REST_METHOD"
                    regex="PUT">
               <then>
                  <filter source="//m1:status/text()" regex="Payment Accepted">
                     <then>
                        <property name="Location"
                                  expression="concat($ctx:STARBUCKS_HOST_NAME, 'payment/order/', $ctx:uri.var.orderId)"
                                  scope="transport"/>
                        <sequence key="StarbucksPaymentInfo"/>
                        <property name="HTTP_SC" value="201" scope="axis2"/>
                     </then>
                     <else>
                        <payloadFactory media-type="xml">
                           <format>
                              <paymentError xmlns="http://starbucks.example.org/">
                                 <errorCode>$1</errorCode>
                              </paymentError>
                           </format>
                           <args>
                              <arg evaluator="xml" expression="//m1:status/text()"/>
                           </args>
                        </payloadFactory>
                        <property name="HTTP_SC" value="403" scope="axis2"/>
                     </else>
                  </filter>
               </then>
               <else>
                  <filter xpath="//m1:orderId">
                     <then>
                        <sequence key="StarbucksPaymentInfo"/>
                     </then>
                     <else>
                        <payloadFactory media-type="xml">
                           <format>
                              <paymentError xmlns="http://starbucks.example.org/">
                                 <errorCode>No payment resource found</errorCode>
                              </paymentError>
                           </format>
                           <args/>
                        </payloadFactory>
                        <property name="HTTP_SC" value="404" scope="axis2"/>
                     </else>
                  </filter>
               </else>
            </filter>
            <send/>
         </outSequence>
      </resource>
      <resource inSequence="main"/>
   </api>
   <api name="StarbucksOrderAPI" context="/order">
      <resource methods="OPTIONS PUT GET"
                uri-template="/{orderId}"
                faultSequence="StarbuckFault">
         <inSequence>
            <property xmlns:m1="http://ws.starbucks.com/xsd"
                      xmlns:sb="http://starbucks.example.org"
                      xmlns:m0="http://ws.starbucks.com"
                      name="STARBUCKS_HOST_NAME"
                      expression="$axis2:SERVICE_PREFIX"/>
            <switch xmlns:m1="http://ws.starbucks.com/xsd"
                    xmlns:sb="http://starbucks.example.org"
                    xmlns:m0="http://ws.starbucks.com"
                    source="$ctx:REST_METHOD">
               <case regex="PUT">
                  <payloadFactory media-type="xml">
                     <format>
                        <m0:updateOrder>
                           <m0:orderId>$1</m0:orderId>
                           <m0:drinkName>$2</m0:drinkName>
                           <m0:additions>$3</m0:additions>
                        </m0:updateOrder>
                     </format>
                     <args>
                        <arg evaluator="xml" expression="$ctx:uri.var.orderId"/>
                        <arg evaluator="xml" expression="//sb:drink"/>
                        <arg evaluator="xml" expression="//sb:additions"/>
                     </args>
                  </payloadFactory>
               </case>
               <default>
                  <payloadFactory media-type="xml">
                     <format>
                        <m0:getOrder>
                           <m0:orderId>$1</m0:orderId>
                        </m0:getOrder>
                     </format>
                     <args>
                        <arg evaluator="xml" expression="$ctx:uri.var.orderId"/>
                     </args>
                  </payloadFactory>
               </default>
            </switch>
            <property name="HTTP_METHOD" value="POST" scope="axis2"/>
            <property name="SOAPAction" value="urn:getOrder" scope="transport"/>
            <send>
               <endpoint key="DataServiceEndpoint"/>
            </send>
         </inSequence>
         <outSequence>
            <switch xmlns:m1="http://ws.starbucks.com/xsd"
                    xmlns:sb="http://starbucks.example.org"
                    xmlns:m0="http://ws.starbucks.com"
                    source="$ctx:REST_METHOD">
               <case regex="OPTIONS">
                  <property name="NO_ENTITY_BODY" value="true" scope="axis2" type="BOOLEAN"/>
                  <filter source="//m1:locked" regex="false">
                     <then>
                        <property name="Allow" value="GET,PUT" scope="transport"/>
                     </then>
                     <else>
                        <property name="Allow" value="GET" scope="transport"/>
                     </else>
                  </filter>
               </case>
               <case regex="GET">
                  <filter xpath="//m1:orderId">
                     <then>
                        <sequence key="StarbucksOrderInfo"/>
                        <property name="Location" scope="transport" action="remove"/>
                     </then>
                     <else>
                        <sequence key="StarbucksMissingOrder"/>
                     </else>
                  </filter>
               </case>
               <case regex="PUT">
                  <filter xpath="//m1:orderId">
                     <then>
                        <property name="STARBUCKS_RESOURCE_LOCKED" expression="//m1:locked"/>
                        <sequence key="StarbucksOrderInfo"/>
                        <filter source="$ctx:STARBUCKS_RESOURCE_LOCKED" regex="true">
                           <property name="HTTP_SC" value="409" scope="axis2"/>
                           <property name="Location" scope="transport" action="remove"/>
                        </filter>
                     </then>
                     <else>
                        <sequence key="StarbucksMissingOrder"/>
                     </else>
                  </filter>
               </case>
            </switch>
            <send/>
         </outSequence>
      </resource>
      <resource methods="POST" url-mapping="/" faultSequence="StarbucksFault">
         <inSequence>
            <property xmlns:m1="http://ws.starbucks.com/xsd"
                      xmlns:sb="http://starbucks.example.org"
                      xmlns:m0="http://ws.starbucks.com"
                      name="STARBUCKS_HOST_NAME"
                      expression="$axis2:SERVICE_PREFIX"/>
            <payloadFactory media-type="xml">
               <format>
                  <m0:addOrder xmlns:m0="http://ws.starbucks.com">
                     <m0:drinkName>$1</m0:drinkName>
                     <m0:additions>$2</m0:additions>
                  </m0:addOrder>
               </format>
               <args>
                  <arg xmlns:m1="http://ws.starbucks.com/xsd"
                       xmlns:sb="http://starbucks.example.org"
                       xmlns:m0="http://ws.starbucks.com"
                       evaluator="xml"
                       expression="//sb:drink"/>
                  <arg xmlns:m1="http://ws.starbucks.com/xsd"
                       xmlns:sb="http://starbucks.example.org"
                       xmlns:m0="http://ws.starbucks.com"
                       evaluator="xml"
                       expression="//sb:additions"/>
               </args>
            </payloadFactory>
            <property name="SOAPAction" value="urn:addOrder" scope="transport"/>
            <send>
               <endpoint key="DataServiceEndpoint"/>
            </send>
         </inSequence>
         <outSequence>
            <property name="HTTP_SC" value="201" scope="axis2"/>
            <property xmlns:m1="http://ws.starbucks.com/xsd"
                      xmlns:sb="http://starbucks.example.org"
                      xmlns:m0="http://ws.starbucks.com"
                      name="uri.var.orderId"
                      expression="//m1:orderId"/>
            <sequence key="StarbucksOrderInfo"/>
            <send/>
         </outSequence>
      </resource>
   </api>
   <api name="StarbucksBaristaAPI" context="/barista">
      <resource methods="DELETE PUT" uri-template="/order/{orderId}">
         <inSequence>
            <property xmlns:m1="http://ws.starbucks.com/xsd"
                      xmlns:sb="http://starbucks.example.org"
                      xmlns:m0="http://ws.starbucks.com"
                      name="STARBUCKS_HOST_NAME"
                      expression="$axis2:SERVICE_PREFIX"/>
            <switch xmlns:m1="http://ws.starbucks.com/xsd"
                    xmlns:sb="http://starbucks.example.org"
                    xmlns:m0="http://ws.starbucks.com"
                    source="$ctx:REST_METHOD">
               <case regex="DELETE">
                  <payloadFactory media-type="xml">
                     <format>
                        <m0:removeOrder>
                           <m0:orderId>$1</m0:orderId>
                        </m0:removeOrder>
                     </format>
                     <args>
                        <arg evaluator="xml" expression="$ctx:uri.var.orderId"/>
                     </args>
                  </payloadFactory>
               </case>
               <case regex="PUT">
                  <payloadFactory media-type="xml">
                     <format>
                        <m0:lockOrder>
                           <m0:orderId>$1</m0:orderId>
                        </m0:lockOrder>
                     </format>
                     <args>
                        <arg evaluator="xml" expression="$ctx:uri.var.orderId"/>
                     </args>
                  </payloadFactory>
                  <property name="STARBUCKS_CONTENT_TYPE" expression="$axis2:ContentType"/>
                  <property name="ContentType" value="application/xml" scope="axis2"/>
               </case>
            </switch>
            <property name="HTTP_METHOD" value="POST" scope="axis2"/>
            <send>
               <endpoint key="DataServiceEndpoint"/>
            </send>
         </inSequence>
         <outSequence>
            <switch xmlns:m1="http://ws.starbucks.com/xsd"
                    xmlns:sb="http://starbucks.example.org"
                    xmlns:m0="http://ws.starbucks.com"
                    source="$ctx:REST_METHOD">
               <case regex="DELETE">
                  <payloadFactory media-type="xml">
                     <format>
                        <message xmlns="http://starbucks.example.org">Order deleted</message>
                     </format>
                     <args/>
                  </payloadFactory>
               </case>
               <case regex="PUT">
                  <payloadFactory media-type="xml">
                     <format>
                        <order xmlns="http://starbucks.example.org">
                           <drink>$1</drink>
                           <cost>$2</cost>
                           <additions>$3</additions>
                        </order>
                     </format>
                     <args>
                        <arg evaluator="xml" expression="//m1:drinkName/text()"/>
                        <arg evaluator="xml" expression="//m1:cost/text()"/>
                        <arg evaluator="xml" expression="//m1:additions/text()"/>
                     </args>
                  </payloadFactory>
                  <property name="ContentType"
                            expression="$ctx:STARBUCKS_CONTENT_TYPE"
                            scope="axis2"/>
               </case>
            </switch>
            <send/>
         </outSequence>
      </resource>
   </api>
</definitions>
